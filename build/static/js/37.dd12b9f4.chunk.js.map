{"version":3,"sources":["../node_modules/react-bootstrap/esm/Spinner.js","app/views/app/deepDive/index.jsx","redux/actions/DeepDiveActions.js"],"names":["_excluded","Spinner","forwardRef","_ref","ref","bsPrefix","variant","animation","size","children","_ref$as","as","Component","className","props","bsSpinnerPrefix","createElement","displayName","connect","state","deepDive","loading","dispatch","useDispatch","useEffect","type","constant","style","width","height","display","placeItems","data","title","src"],"mappings":"kGAAA,4DAEIA,EAAY,CAAC,WAAY,UAAW,YAAa,OAAQ,WAAY,KAAM,aAI3EC,EAAuB,IAAMC,YAAW,SAAUC,EAAMC,GAC1D,IAAIC,EAAWF,EAAKE,SAChBC,EAAUH,EAAKG,QACfC,EAAYJ,EAAKI,UACjBC,EAAOL,EAAKK,KACZC,EAAWN,EAAKM,SAChBC,EAAUP,EAAKQ,GACfC,OAAwB,IAAZF,EAAqB,MAAQA,EACzCG,EAAYV,EAAKU,UACjBC,EAAQ,YAA8BX,EAAMH,GAG5Ce,GADJV,EAAW,YAAmBA,EAAU,YACP,IAAME,EACvC,OAAoB,IAAMS,cAAcJ,EAAW,YAAS,CAC1DR,IAAKA,GACJU,EAAO,CACRD,UAAW,IAAWA,EAAWE,EAAiBP,GAAQO,EAAkB,IAAMP,EAAMF,GAAW,QAAUA,KAC3GG,MAENR,EAAQgB,YAAc,UACP,O,wFCcAC,uBALS,SAAAC,GAEtB,OADqBA,EAAbC,WAIKF,EAnCf,YAAkD,IAAtBG,EAAqB,EAArBA,QAASD,EAAY,EAAZA,SAC7BE,EAAWC,cAIjB,OAHAC,qBAAU,WACRF,ECLK,CACLG,KAAMC,QDKL,IAED,yBACEC,MAAO,CACLC,MAAO,OACPC,OAAQ,SAETR,GACC,yBAAKM,MAAO,CAAEE,OAAQ,OAAQC,QAAS,OAAQC,WAAY,WACzD,kBAAC9B,EAAA,EAAD,CAASM,UAAU,SAASD,QAAQ,cAGtCe,GACAD,IACmB,OAAV,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUY,OAAmC,MAAX,OAARZ,QAAQ,IAARA,OAAA,EAAAA,EAAUY,QACnC,4BACEC,MAAM,SACNC,IAAG,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAUY,KACfJ,MAAM,OACNC,OAAO","file":"static/js/37.dd12b9f4.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React, { useEffect } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { FetchDeepDiveURL } from '../../../../redux/actions/DeepDiveActions';\r\n\r\nfunction DeepDiveAnalysis({ loading, deepDive }) {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(FetchDeepDiveURL());\r\n  }, []);\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n        height: '100%',\r\n      }}>\r\n      {loading && (\r\n        <div style={{ height: '100%', display: 'grid', placeItems: 'center' }}>\r\n          <Spinner animation='border' variant='warning' />\r\n        </div>\r\n      )}\r\n      {!loading &&\r\n        deepDive &&\r\n        (deepDive?.data != null || deepDive?.data !== '') && (\r\n          <iframe\r\n            title='iframe'\r\n            src={deepDive?.data}\r\n            width='100%'\r\n            height='100%'\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { deepDive } = state;\r\n  return deepDive;\r\n};\r\n\r\nexport default connect(mapStateToProps)(DeepDiveAnalysis);\r\n","import * as constant from '../constants/DeepDiveConstants';\r\n\r\nexport const FetchDeepDiveURL = () => {\r\n  return {\r\n    type: constant.DEEPDIVE_INIT,\r\n  };\r\n};\r\n"],"sourceRoot":""}